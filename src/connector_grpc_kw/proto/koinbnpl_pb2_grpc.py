# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import koinbnpl_pb2 as koinbnpl__pb2


class KoinbnplStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpsertVendorDetail = channel.unary_unary(
                '/packets.Koinbnpl/UpsertVendorDetail',
                request_serializer=koinbnpl__pb2.UpsertVendorDetailArguments.SerializeToString,
                response_deserializer=common__pb2.PViewResponses.FromString,
                )
        self.GetLimit = channel.unary_unary(
                '/packets.Koinbnpl/GetLimit',
                request_serializer=koinbnpl__pb2.GetBNPLLimitArguments.SerializeToString,
                response_deserializer=koinbnpl__pb2.BNPLLimitResponses.FromString,
                )
        self.GetVendorDetailByUUID = channel.unary_unary(
                '/packets.Koinbnpl/GetVendorDetailByUUID',
                request_serializer=koinbnpl__pb2.GetBNPLVendorDetailByUUIDArguments.SerializeToString,
                response_deserializer=common__pb2.PViewResponses.FromString,
                )
        self.ReserveLimit = channel.unary_unary(
                '/packets.Koinbnpl/ReserveLimit',
                request_serializer=koinbnpl__pb2.ReserveBNPLLimitArguments.SerializeToString,
                response_deserializer=koinbnpl__pb2.BNPLLimitResponses.FromString,
                )
        self.RollbackLimit = channel.unary_unary(
                '/packets.Koinbnpl/RollbackLimit',
                request_serializer=koinbnpl__pb2.RollbackBNPLLimitArguments.SerializeToString,
                response_deserializer=koinbnpl__pb2.BNPLLimitResponses.FromString,
                )
        self.UseLimit = channel.unary_unary(
                '/packets.Koinbnpl/UseLimit',
                request_serializer=koinbnpl__pb2.UseBNPLLimitArguments.SerializeToString,
                response_deserializer=koinbnpl__pb2.BNPLLimitResponses.FromString,
                )
        self.ReleaseLimit = channel.unary_unary(
                '/packets.Koinbnpl/ReleaseLimit',
                request_serializer=koinbnpl__pb2.ReleaseBNPLLimitArguments.SerializeToString,
                response_deserializer=koinbnpl__pb2.BNPLLimitResponses.FromString,
                )
        self.RequestLimit = channel.unary_unary(
                '/packets.Koinbnpl/RequestLimit',
                request_serializer=koinbnpl__pb2.RequestBNPLLimitArguments.SerializeToString,
                response_deserializer=koinbnpl__pb2.BNPLLimitResponses.FromString,
                )
        self.GetLoanDetail = channel.unary_unary(
                '/packets.Koinbnpl/GetLoanDetail',
                request_serializer=koinbnpl__pb2.GetLoanDetailsArgument.SerializeToString,
                response_deserializer=common__pb2.PViewResponses.FromString,
                )
        self.GetDistributor = channel.unary_unary(
                '/packets.Koinbnpl/GetDistributor',
                request_serializer=koinbnpl__pb2.GetDistributorRequest.SerializeToString,
                response_deserializer=koinbnpl__pb2.Distributor.FromString,
                )


class KoinbnplServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpsertVendorDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorDetailByUUID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RollbackLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UseLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoanDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistributor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KoinbnplServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpsertVendorDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertVendorDetail,
                    request_deserializer=koinbnpl__pb2.UpsertVendorDetailArguments.FromString,
                    response_serializer=common__pb2.PViewResponses.SerializeToString,
            ),
            'GetLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLimit,
                    request_deserializer=koinbnpl__pb2.GetBNPLLimitArguments.FromString,
                    response_serializer=koinbnpl__pb2.BNPLLimitResponses.SerializeToString,
            ),
            'GetVendorDetailByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorDetailByUUID,
                    request_deserializer=koinbnpl__pb2.GetBNPLVendorDetailByUUIDArguments.FromString,
                    response_serializer=common__pb2.PViewResponses.SerializeToString,
            ),
            'ReserveLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveLimit,
                    request_deserializer=koinbnpl__pb2.ReserveBNPLLimitArguments.FromString,
                    response_serializer=koinbnpl__pb2.BNPLLimitResponses.SerializeToString,
            ),
            'RollbackLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.RollbackLimit,
                    request_deserializer=koinbnpl__pb2.RollbackBNPLLimitArguments.FromString,
                    response_serializer=koinbnpl__pb2.BNPLLimitResponses.SerializeToString,
            ),
            'UseLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.UseLimit,
                    request_deserializer=koinbnpl__pb2.UseBNPLLimitArguments.FromString,
                    response_serializer=koinbnpl__pb2.BNPLLimitResponses.SerializeToString,
            ),
            'ReleaseLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseLimit,
                    request_deserializer=koinbnpl__pb2.ReleaseBNPLLimitArguments.FromString,
                    response_serializer=koinbnpl__pb2.BNPLLimitResponses.SerializeToString,
            ),
            'RequestLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLimit,
                    request_deserializer=koinbnpl__pb2.RequestBNPLLimitArguments.FromString,
                    response_serializer=koinbnpl__pb2.BNPLLimitResponses.SerializeToString,
            ),
            'GetLoanDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoanDetail,
                    request_deserializer=koinbnpl__pb2.GetLoanDetailsArgument.FromString,
                    response_serializer=common__pb2.PViewResponses.SerializeToString,
            ),
            'GetDistributor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistributor,
                    request_deserializer=koinbnpl__pb2.GetDistributorRequest.FromString,
                    response_serializer=koinbnpl__pb2.Distributor.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'packets.Koinbnpl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Koinbnpl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpsertVendorDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/UpsertVendorDetail',
            koinbnpl__pb2.UpsertVendorDetailArguments.SerializeToString,
            common__pb2.PViewResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/GetLimit',
            koinbnpl__pb2.GetBNPLLimitArguments.SerializeToString,
            koinbnpl__pb2.BNPLLimitResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorDetailByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/GetVendorDetailByUUID',
            koinbnpl__pb2.GetBNPLVendorDetailByUUIDArguments.SerializeToString,
            common__pb2.PViewResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReserveLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/ReserveLimit',
            koinbnpl__pb2.ReserveBNPLLimitArguments.SerializeToString,
            koinbnpl__pb2.BNPLLimitResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RollbackLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/RollbackLimit',
            koinbnpl__pb2.RollbackBNPLLimitArguments.SerializeToString,
            koinbnpl__pb2.BNPLLimitResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UseLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/UseLimit',
            koinbnpl__pb2.UseBNPLLimitArguments.SerializeToString,
            koinbnpl__pb2.BNPLLimitResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/ReleaseLimit',
            koinbnpl__pb2.ReleaseBNPLLimitArguments.SerializeToString,
            koinbnpl__pb2.BNPLLimitResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/RequestLimit',
            koinbnpl__pb2.RequestBNPLLimitArguments.SerializeToString,
            koinbnpl__pb2.BNPLLimitResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoanDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/GetLoanDetail',
            koinbnpl__pb2.GetLoanDetailsArgument.SerializeToString,
            common__pb2.PViewResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistributor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Koinbnpl/GetDistributor',
            koinbnpl__pb2.GetDistributorRequest.SerializeToString,
            koinbnpl__pb2.Distributor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
