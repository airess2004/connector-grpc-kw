# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import thirdparty_bv_pb2 as thirdparty__bv__pb2


class ThirdpartyBivrostStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckThirdparty = channel.unary_unary(
                '/packets.ThirdpartyBivrost/CheckThirdparty',
                request_serializer=thirdparty__bv__pb2.CheckThirdpartyArguments.SerializeToString,
                response_deserializer=thirdparty__bv__pb2.CheckThirdpartyResponses.FromString,
                )
        self.ApplyScope = channel.unary_unary(
                '/packets.ThirdpartyBivrost/ApplyScope',
                request_serializer=thirdparty__bv__pb2.ApplyScopeArguments.SerializeToString,
                response_deserializer=thirdparty__bv__pb2.ApplyScopeResponses.FromString,
                )
        self.Authentication = channel.unary_unary(
                '/packets.ThirdpartyBivrost/Authentication',
                request_serializer=thirdparty__bv__pb2.AuthenticationArguments.SerializeToString,
                response_deserializer=thirdparty__bv__pb2.AuthenticationResponses.FromString,
                )
        self.RefreshToken = channel.unary_unary(
                '/packets.ThirdpartyBivrost/RefreshToken',
                request_serializer=thirdparty__bv__pb2.RefreshTokenArguments.SerializeToString,
                response_deserializer=thirdparty__bv__pb2.AuthenticationResponses.FromString,
                )
        self.BasicAuthentication = channel.unary_unary(
                '/packets.ThirdpartyBivrost/BasicAuthentication',
                request_serializer=thirdparty__bv__pb2.BasicAuthenticationArguments.SerializeToString,
                response_deserializer=thirdparty__bv__pb2.AuthenticationResponses.FromString,
                )
        self.BasicRefreshToken = channel.unary_unary(
                '/packets.ThirdpartyBivrost/BasicRefreshToken',
                request_serializer=thirdparty__bv__pb2.BasicRefreshTokenArguments.SerializeToString,
                response_deserializer=thirdparty__bv__pb2.AuthenticationResponses.FromString,
                )
        self.CheckBasicThirdpartyVendor = channel.unary_unary(
                '/packets.ThirdpartyBivrost/CheckBasicThirdpartyVendor',
                request_serializer=thirdparty__bv__pb2.CheckBasicThirdpartyVendorArguments.SerializeToString,
                response_deserializer=thirdparty__bv__pb2.CheckBasicThirdpartyVendorResponses.FromString,
                )


class ThirdpartyBivrostServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckThirdparty(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyScope(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authentication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BasicAuthentication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BasicRefreshToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckBasicThirdpartyVendor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ThirdpartyBivrostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckThirdparty': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckThirdparty,
                    request_deserializer=thirdparty__bv__pb2.CheckThirdpartyArguments.FromString,
                    response_serializer=thirdparty__bv__pb2.CheckThirdpartyResponses.SerializeToString,
            ),
            'ApplyScope': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyScope,
                    request_deserializer=thirdparty__bv__pb2.ApplyScopeArguments.FromString,
                    response_serializer=thirdparty__bv__pb2.ApplyScopeResponses.SerializeToString,
            ),
            'Authentication': grpc.unary_unary_rpc_method_handler(
                    servicer.Authentication,
                    request_deserializer=thirdparty__bv__pb2.AuthenticationArguments.FromString,
                    response_serializer=thirdparty__bv__pb2.AuthenticationResponses.SerializeToString,
            ),
            'RefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshToken,
                    request_deserializer=thirdparty__bv__pb2.RefreshTokenArguments.FromString,
                    response_serializer=thirdparty__bv__pb2.AuthenticationResponses.SerializeToString,
            ),
            'BasicAuthentication': grpc.unary_unary_rpc_method_handler(
                    servicer.BasicAuthentication,
                    request_deserializer=thirdparty__bv__pb2.BasicAuthenticationArguments.FromString,
                    response_serializer=thirdparty__bv__pb2.AuthenticationResponses.SerializeToString,
            ),
            'BasicRefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.BasicRefreshToken,
                    request_deserializer=thirdparty__bv__pb2.BasicRefreshTokenArguments.FromString,
                    response_serializer=thirdparty__bv__pb2.AuthenticationResponses.SerializeToString,
            ),
            'CheckBasicThirdpartyVendor': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckBasicThirdpartyVendor,
                    request_deserializer=thirdparty__bv__pb2.CheckBasicThirdpartyVendorArguments.FromString,
                    response_serializer=thirdparty__bv__pb2.CheckBasicThirdpartyVendorResponses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'packets.ThirdpartyBivrost', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ThirdpartyBivrost(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckThirdparty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.ThirdpartyBivrost/CheckThirdparty',
            thirdparty__bv__pb2.CheckThirdpartyArguments.SerializeToString,
            thirdparty__bv__pb2.CheckThirdpartyResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyScope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.ThirdpartyBivrost/ApplyScope',
            thirdparty__bv__pb2.ApplyScopeArguments.SerializeToString,
            thirdparty__bv__pb2.ApplyScopeResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Authentication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.ThirdpartyBivrost/Authentication',
            thirdparty__bv__pb2.AuthenticationArguments.SerializeToString,
            thirdparty__bv__pb2.AuthenticationResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.ThirdpartyBivrost/RefreshToken',
            thirdparty__bv__pb2.RefreshTokenArguments.SerializeToString,
            thirdparty__bv__pb2.AuthenticationResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BasicAuthentication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.ThirdpartyBivrost/BasicAuthentication',
            thirdparty__bv__pb2.BasicAuthenticationArguments.SerializeToString,
            thirdparty__bv__pb2.AuthenticationResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BasicRefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.ThirdpartyBivrost/BasicRefreshToken',
            thirdparty__bv__pb2.BasicRefreshTokenArguments.SerializeToString,
            thirdparty__bv__pb2.AuthenticationResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckBasicThirdpartyVendor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.ThirdpartyBivrost/CheckBasicThirdpartyVendor',
            thirdparty__bv__pb2.CheckBasicThirdpartyVendorArguments.SerializeToString,
            thirdparty__bv__pb2.CheckBasicThirdpartyVendorResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
