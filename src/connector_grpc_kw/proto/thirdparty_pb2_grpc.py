# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import thirdparty_pb2 as thirdparty__pb2


class ThirdpartyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteAsliRI = channel.unary_unary(
                '/packets.Thirdparty/ExecuteAsliRI',
                request_serializer=thirdparty__pb2.InputExecAsliRI.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputExecAsliRI.FromString,
                )
        self.BorrowerRegisterDigiSign = channel.unary_unary(
                '/packets.Thirdparty/BorrowerRegisterDigiSign',
                request_serializer=thirdparty__pb2.InputDigiSignBorrowerRegister.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputDigiSignBorrowerRegister.FromString,
                )
        self.GetPefindoResult = channel.unary_unary(
                '/packets.Thirdparty/GetPefindoResult',
                request_serializer=thirdparty__pb2.InputGetPefindoResult.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputGetPefindoResult.FromString,
                )
        self.GetMasterLocationList = channel.unary_unary(
                '/packets.Thirdparty/GetMasterLocationList',
                request_serializer=thirdparty__pb2.InputGetMasterLocationList.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetCountry = channel.unary_unary(
                '/packets.Thirdparty/GetCountry',
                request_serializer=thirdparty__pb2.InputGetCountry.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetProvince = channel.unary_unary(
                '/packets.Thirdparty/GetProvince',
                request_serializer=thirdparty__pb2.InputGetProvince.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetCity = channel.unary_unary(
                '/packets.Thirdparty/GetCity',
                request_serializer=thirdparty__pb2.InputGetCity.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetDistrict = channel.unary_unary(
                '/packets.Thirdparty/GetDistrict',
                request_serializer=thirdparty__pb2.InputGetDistrict.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetSubDistrict = channel.unary_unary(
                '/packets.Thirdparty/GetSubDistrict',
                request_serializer=thirdparty__pb2.InputGetSubDistrict.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetPostalCode = channel.unary_unary(
                '/packets.Thirdparty/GetPostalCode',
                request_serializer=thirdparty__pb2.InputGetPostalCode.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetParentLocationFromProvinceName = channel.unary_unary(
                '/packets.Thirdparty/GetParentLocationFromProvinceName',
                request_serializer=thirdparty__pb2.InputGetParentLocationFromProvinceName.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetParentLocationFromCityName = channel.unary_unary(
                '/packets.Thirdparty/GetParentLocationFromCityName',
                request_serializer=thirdparty__pb2.InputGetParentLocationFromCityName.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetParentLocationFromDistrictName = channel.unary_unary(
                '/packets.Thirdparty/GetParentLocationFromDistrictName',
                request_serializer=thirdparty__pb2.InputGetParentLocationFromDistrictName.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetParentLocationFromSubDistrictName = channel.unary_unary(
                '/packets.Thirdparty/GetParentLocationFromSubDistrictName',
                request_serializer=thirdparty__pb2.InputGetParentLocationFromSubDistrictName.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.CheckProvinceExist = channel.unary_unary(
                '/packets.Thirdparty/CheckProvinceExist',
                request_serializer=thirdparty__pb2.InputCheckProvinceExist.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.CheckCityExist = channel.unary_unary(
                '/packets.Thirdparty/CheckCityExist',
                request_serializer=thirdparty__pb2.InputCheckCityExist.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.CheckDistrictExist = channel.unary_unary(
                '/packets.Thirdparty/CheckDistrictExist',
                request_serializer=thirdparty__pb2.InputCheckDistrictExist.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.CheckSubDistrictExist = channel.unary_unary(
                '/packets.Thirdparty/CheckSubDistrictExist',
                request_serializer=thirdparty__pb2.InputCheckSubDistrictExist.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetPefindoCalculation = channel.unary_unary(
                '/packets.Thirdparty/GetPefindoCalculation',
                request_serializer=thirdparty__pb2.InputGetPefindoCalculation.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputGetPefindoCalculation.FromString,
                )
        self.CreatePolicyPasarPolis = channel.unary_unary(
                '/packets.Thirdparty/CreatePolicyPasarPolis',
                request_serializer=thirdparty__pb2.ParamCreatePolicyPasarPolis.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputPasarPolis.FromString,
                )
        self.CancellationFlowPasarPolis = channel.unary_unary(
                '/packets.Thirdparty/CancellationFlowPasarPolis',
                request_serializer=thirdparty__pb2.ParamCancellationFlowPasarPolis.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputPasarPolis.FromString,
                )
        self.GettingPolicyStatusPasarPolis = channel.unary_unary(
                '/packets.Thirdparty/GettingPolicyStatusPasarPolis',
                request_serializer=thirdparty__pb2.ParamGettingPolicyStatusPasarPolis.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputPasarPolis.FromString,
                )
        self.RevinitivScreening = channel.unary_unary(
                '/packets.Thirdparty/RevinitivScreening',
                request_serializer=thirdparty__pb2.InputRevinitivScreening.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.RevinitivScreeningV2 = channel.unary_unary(
                '/packets.Thirdparty/RevinitivScreeningV2',
                request_serializer=thirdparty__pb2.InputRevinitivScreeningV2.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.SendClevertapEvent = channel.unary_unary(
                '/packets.Thirdparty/SendClevertapEvent',
                request_serializer=thirdparty__pb2.BatchInputSendClevertapEvent.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputSendClevertapEvent.FromString,
                )
        self.SendClevertapProfileData = channel.unary_unary(
                '/packets.Thirdparty/SendClevertapProfileData',
                request_serializer=thirdparty__pb2.BatchInputSendClevertapProfileData.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputSendClevertapProfileData.FromString,
                )
        self.OyGetBankInquiry = channel.unary_unary(
                '/packets.Thirdparty/OyGetBankInquiry',
                request_serializer=thirdparty__pb2.InputOyGetBankInquiry.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputOyGetBankInquiry.FromString,
                )
        self.SendAppsFlyerEvent = channel.unary_unary(
                '/packets.Thirdparty/SendAppsFlyerEvent',
                request_serializer=thirdparty__pb2.InputSendAppsFlyerEvent.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetMonthlyInstallmentOtherVendor = channel.unary_unary(
                '/packets.Thirdparty/GetMonthlyInstallmentOtherVendor',
                request_serializer=thirdparty__pb2.InputGetMonthlyInstallmentOtherVendor.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputGetMonthlyInstallmentOtherVendor.FromString,
                )
        self.SyncToNetsuite = channel.unary_unary(
                '/packets.Thirdparty/SyncToNetsuite',
                request_serializer=thirdparty__pb2.SyncToNetsuiteArguments.SerializeToString,
                response_deserializer=common__pb2.PViewResponses.FromString,
                )
        self.GetUCLPefindoData = channel.unary_unary(
                '/packets.Thirdparty/GetUCLPefindoData',
                request_serializer=thirdparty__pb2.InputGetUCLPefindoData.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputGetUCLPefindoData.FromString,
                )
        self.GetFraudScore = channel.unary_unary(
                '/packets.Thirdparty/GetFraudScore',
                request_serializer=thirdparty__pb2.InputGetFraudscore.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputGetFraudscore.FromString,
                )
        self.GetPefindoSummary = channel.unary_unary(
                '/packets.Thirdparty/GetPefindoSummary',
                request_serializer=thirdparty__pb2.InputGetPefindoSummary.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.ClikNAE = channel.unary_unary(
                '/packets.Thirdparty/ClikNAE',
                request_serializer=thirdparty__pb2.InputClikNAE.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputClikNAE.FromString,
                )
        self.GetVendorByID = channel.unary_unary(
                '/packets.Thirdparty/GetVendorByID',
                request_serializer=thirdparty__pb2.InputGetVendorByID.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetVendorByUUID = channel.unary_unary(
                '/packets.Thirdparty/GetVendorByUUID',
                request_serializer=thirdparty__pb2.GetVendorByUUIDArguments.SerializeToString,
                response_deserializer=common__pb2.PViewResponses.FromString,
                )
        self.UpsertVendor = channel.unary_unary(
                '/packets.Thirdparty/UpsertVendor',
                request_serializer=thirdparty__pb2.UpsertVendorRequest.SerializeToString,
                response_deserializer=thirdparty__pb2.OutputThirdParty.FromString,
                )
        self.GetVendorByCode = channel.unary_unary(
                '/packets.Thirdparty/GetVendorByCode',
                request_serializer=thirdparty__pb2.GetVendorByCodeArguments.SerializeToString,
                response_deserializer=common__pb2.PViewResponses.FromString,
                )
        self.GetScopesByCodes = channel.unary_unary(
                '/packets.Thirdparty/GetScopesByCodes',
                request_serializer=thirdparty__pb2.GetScopesByCodesArgs.SerializeToString,
                response_deserializer=thirdparty__pb2.GetScopesByCodesReponses.FromString,
                )
        self.ApplyVendorScopes = channel.unary_unary(
                '/packets.Thirdparty/ApplyVendorScopes',
                request_serializer=thirdparty__pb2.ApplyVendorScopesArgs.SerializeToString,
                response_deserializer=thirdparty__pb2.ApplyVendorScopesResponses.FromString,
                )
        self.UpsertFreshSalesDeal = channel.unary_unary(
                '/packets.Thirdparty/UpsertFreshSalesDeal',
                request_serializer=thirdparty__pb2.FreshSalesDeal.SerializeToString,
                response_deserializer=thirdparty__pb2.FreshSalesDeal.FromString,
                )
        self.InsertMixpanelEvent = channel.unary_unary(
                '/packets.Thirdparty/InsertMixpanelEvent',
                request_serializer=thirdparty__pb2.InsertMixpanelEventRequest.SerializeToString,
                response_deserializer=thirdparty__pb2.InsertMixpanelEventResponse.FromString,
                )


class ThirdpartyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteAsliRI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BorrowerRegisterDigiSign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPefindoResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMasterLocationList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProvince(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistrict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubDistrict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPostalCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParentLocationFromProvinceName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParentLocationFromCityName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParentLocationFromDistrictName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetParentLocationFromSubDistrictName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckProvinceExist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCityExist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckDistrictExist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckSubDistrictExist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPefindoCalculation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePolicyPasarPolis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancellationFlowPasarPolis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GettingPolicyStatusPasarPolis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevinitivScreening(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevinitivScreeningV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendClevertapEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendClevertapProfileData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OyGetBankInquiry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAppsFlyerEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMonthlyInstallmentOtherVendor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncToNetsuite(self, request, context):
        """> Netsuite
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUCLPefindoData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFraudScore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPefindoSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClikNAE(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorByUUID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertVendor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorByCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScopesByCodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyVendorScopes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertFreshSalesDeal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertMixpanelEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ThirdpartyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteAsliRI': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAsliRI,
                    request_deserializer=thirdparty__pb2.InputExecAsliRI.FromString,
                    response_serializer=thirdparty__pb2.OutputExecAsliRI.SerializeToString,
            ),
            'BorrowerRegisterDigiSign': grpc.unary_unary_rpc_method_handler(
                    servicer.BorrowerRegisterDigiSign,
                    request_deserializer=thirdparty__pb2.InputDigiSignBorrowerRegister.FromString,
                    response_serializer=thirdparty__pb2.OutputDigiSignBorrowerRegister.SerializeToString,
            ),
            'GetPefindoResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPefindoResult,
                    request_deserializer=thirdparty__pb2.InputGetPefindoResult.FromString,
                    response_serializer=thirdparty__pb2.OutputGetPefindoResult.SerializeToString,
            ),
            'GetMasterLocationList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMasterLocationList,
                    request_deserializer=thirdparty__pb2.InputGetMasterLocationList.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetCountry': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCountry,
                    request_deserializer=thirdparty__pb2.InputGetCountry.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetProvince': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProvince,
                    request_deserializer=thirdparty__pb2.InputGetProvince.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetCity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCity,
                    request_deserializer=thirdparty__pb2.InputGetCity.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetDistrict': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistrict,
                    request_deserializer=thirdparty__pb2.InputGetDistrict.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetSubDistrict': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubDistrict,
                    request_deserializer=thirdparty__pb2.InputGetSubDistrict.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetPostalCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPostalCode,
                    request_deserializer=thirdparty__pb2.InputGetPostalCode.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetParentLocationFromProvinceName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParentLocationFromProvinceName,
                    request_deserializer=thirdparty__pb2.InputGetParentLocationFromProvinceName.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetParentLocationFromCityName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParentLocationFromCityName,
                    request_deserializer=thirdparty__pb2.InputGetParentLocationFromCityName.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetParentLocationFromDistrictName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParentLocationFromDistrictName,
                    request_deserializer=thirdparty__pb2.InputGetParentLocationFromDistrictName.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetParentLocationFromSubDistrictName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetParentLocationFromSubDistrictName,
                    request_deserializer=thirdparty__pb2.InputGetParentLocationFromSubDistrictName.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'CheckProvinceExist': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckProvinceExist,
                    request_deserializer=thirdparty__pb2.InputCheckProvinceExist.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'CheckCityExist': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCityExist,
                    request_deserializer=thirdparty__pb2.InputCheckCityExist.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'CheckDistrictExist': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckDistrictExist,
                    request_deserializer=thirdparty__pb2.InputCheckDistrictExist.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'CheckSubDistrictExist': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckSubDistrictExist,
                    request_deserializer=thirdparty__pb2.InputCheckSubDistrictExist.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetPefindoCalculation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPefindoCalculation,
                    request_deserializer=thirdparty__pb2.InputGetPefindoCalculation.FromString,
                    response_serializer=thirdparty__pb2.OutputGetPefindoCalculation.SerializeToString,
            ),
            'CreatePolicyPasarPolis': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePolicyPasarPolis,
                    request_deserializer=thirdparty__pb2.ParamCreatePolicyPasarPolis.FromString,
                    response_serializer=thirdparty__pb2.OutputPasarPolis.SerializeToString,
            ),
            'CancellationFlowPasarPolis': grpc.unary_unary_rpc_method_handler(
                    servicer.CancellationFlowPasarPolis,
                    request_deserializer=thirdparty__pb2.ParamCancellationFlowPasarPolis.FromString,
                    response_serializer=thirdparty__pb2.OutputPasarPolis.SerializeToString,
            ),
            'GettingPolicyStatusPasarPolis': grpc.unary_unary_rpc_method_handler(
                    servicer.GettingPolicyStatusPasarPolis,
                    request_deserializer=thirdparty__pb2.ParamGettingPolicyStatusPasarPolis.FromString,
                    response_serializer=thirdparty__pb2.OutputPasarPolis.SerializeToString,
            ),
            'RevinitivScreening': grpc.unary_unary_rpc_method_handler(
                    servicer.RevinitivScreening,
                    request_deserializer=thirdparty__pb2.InputRevinitivScreening.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'RevinitivScreeningV2': grpc.unary_unary_rpc_method_handler(
                    servicer.RevinitivScreeningV2,
                    request_deserializer=thirdparty__pb2.InputRevinitivScreeningV2.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'SendClevertapEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendClevertapEvent,
                    request_deserializer=thirdparty__pb2.BatchInputSendClevertapEvent.FromString,
                    response_serializer=thirdparty__pb2.OutputSendClevertapEvent.SerializeToString,
            ),
            'SendClevertapProfileData': grpc.unary_unary_rpc_method_handler(
                    servicer.SendClevertapProfileData,
                    request_deserializer=thirdparty__pb2.BatchInputSendClevertapProfileData.FromString,
                    response_serializer=thirdparty__pb2.OutputSendClevertapProfileData.SerializeToString,
            ),
            'OyGetBankInquiry': grpc.unary_unary_rpc_method_handler(
                    servicer.OyGetBankInquiry,
                    request_deserializer=thirdparty__pb2.InputOyGetBankInquiry.FromString,
                    response_serializer=thirdparty__pb2.OutputOyGetBankInquiry.SerializeToString,
            ),
            'SendAppsFlyerEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAppsFlyerEvent,
                    request_deserializer=thirdparty__pb2.InputSendAppsFlyerEvent.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetMonthlyInstallmentOtherVendor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMonthlyInstallmentOtherVendor,
                    request_deserializer=thirdparty__pb2.InputGetMonthlyInstallmentOtherVendor.FromString,
                    response_serializer=thirdparty__pb2.OutputGetMonthlyInstallmentOtherVendor.SerializeToString,
            ),
            'SyncToNetsuite': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncToNetsuite,
                    request_deserializer=thirdparty__pb2.SyncToNetsuiteArguments.FromString,
                    response_serializer=common__pb2.PViewResponses.SerializeToString,
            ),
            'GetUCLPefindoData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUCLPefindoData,
                    request_deserializer=thirdparty__pb2.InputGetUCLPefindoData.FromString,
                    response_serializer=thirdparty__pb2.OutputGetUCLPefindoData.SerializeToString,
            ),
            'GetFraudScore': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFraudScore,
                    request_deserializer=thirdparty__pb2.InputGetFraudscore.FromString,
                    response_serializer=thirdparty__pb2.OutputGetFraudscore.SerializeToString,
            ),
            'GetPefindoSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPefindoSummary,
                    request_deserializer=thirdparty__pb2.InputGetPefindoSummary.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'ClikNAE': grpc.unary_unary_rpc_method_handler(
                    servicer.ClikNAE,
                    request_deserializer=thirdparty__pb2.InputClikNAE.FromString,
                    response_serializer=thirdparty__pb2.OutputClikNAE.SerializeToString,
            ),
            'GetVendorByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorByID,
                    request_deserializer=thirdparty__pb2.InputGetVendorByID.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetVendorByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorByUUID,
                    request_deserializer=thirdparty__pb2.GetVendorByUUIDArguments.FromString,
                    response_serializer=common__pb2.PViewResponses.SerializeToString,
            ),
            'UpsertVendor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertVendor,
                    request_deserializer=thirdparty__pb2.UpsertVendorRequest.FromString,
                    response_serializer=thirdparty__pb2.OutputThirdParty.SerializeToString,
            ),
            'GetVendorByCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorByCode,
                    request_deserializer=thirdparty__pb2.GetVendorByCodeArguments.FromString,
                    response_serializer=common__pb2.PViewResponses.SerializeToString,
            ),
            'GetScopesByCodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScopesByCodes,
                    request_deserializer=thirdparty__pb2.GetScopesByCodesArgs.FromString,
                    response_serializer=thirdparty__pb2.GetScopesByCodesReponses.SerializeToString,
            ),
            'ApplyVendorScopes': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyVendorScopes,
                    request_deserializer=thirdparty__pb2.ApplyVendorScopesArgs.FromString,
                    response_serializer=thirdparty__pb2.ApplyVendorScopesResponses.SerializeToString,
            ),
            'UpsertFreshSalesDeal': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertFreshSalesDeal,
                    request_deserializer=thirdparty__pb2.FreshSalesDeal.FromString,
                    response_serializer=thirdparty__pb2.FreshSalesDeal.SerializeToString,
            ),
            'InsertMixpanelEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertMixpanelEvent,
                    request_deserializer=thirdparty__pb2.InsertMixpanelEventRequest.FromString,
                    response_serializer=thirdparty__pb2.InsertMixpanelEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'packets.Thirdparty', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Thirdparty(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteAsliRI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/ExecuteAsliRI',
            thirdparty__pb2.InputExecAsliRI.SerializeToString,
            thirdparty__pb2.OutputExecAsliRI.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BorrowerRegisterDigiSign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/BorrowerRegisterDigiSign',
            thirdparty__pb2.InputDigiSignBorrowerRegister.SerializeToString,
            thirdparty__pb2.OutputDigiSignBorrowerRegister.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPefindoResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetPefindoResult',
            thirdparty__pb2.InputGetPefindoResult.SerializeToString,
            thirdparty__pb2.OutputGetPefindoResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMasterLocationList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetMasterLocationList',
            thirdparty__pb2.InputGetMasterLocationList.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCountry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetCountry',
            thirdparty__pb2.InputGetCountry.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProvince(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetProvince',
            thirdparty__pb2.InputGetProvince.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetCity',
            thirdparty__pb2.InputGetCity.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistrict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetDistrict',
            thirdparty__pb2.InputGetDistrict.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubDistrict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetSubDistrict',
            thirdparty__pb2.InputGetSubDistrict.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPostalCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetPostalCode',
            thirdparty__pb2.InputGetPostalCode.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetParentLocationFromProvinceName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetParentLocationFromProvinceName',
            thirdparty__pb2.InputGetParentLocationFromProvinceName.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetParentLocationFromCityName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetParentLocationFromCityName',
            thirdparty__pb2.InputGetParentLocationFromCityName.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetParentLocationFromDistrictName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetParentLocationFromDistrictName',
            thirdparty__pb2.InputGetParentLocationFromDistrictName.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetParentLocationFromSubDistrictName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetParentLocationFromSubDistrictName',
            thirdparty__pb2.InputGetParentLocationFromSubDistrictName.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckProvinceExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/CheckProvinceExist',
            thirdparty__pb2.InputCheckProvinceExist.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCityExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/CheckCityExist',
            thirdparty__pb2.InputCheckCityExist.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckDistrictExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/CheckDistrictExist',
            thirdparty__pb2.InputCheckDistrictExist.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckSubDistrictExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/CheckSubDistrictExist',
            thirdparty__pb2.InputCheckSubDistrictExist.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPefindoCalculation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetPefindoCalculation',
            thirdparty__pb2.InputGetPefindoCalculation.SerializeToString,
            thirdparty__pb2.OutputGetPefindoCalculation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePolicyPasarPolis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/CreatePolicyPasarPolis',
            thirdparty__pb2.ParamCreatePolicyPasarPolis.SerializeToString,
            thirdparty__pb2.OutputPasarPolis.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancellationFlowPasarPolis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/CancellationFlowPasarPolis',
            thirdparty__pb2.ParamCancellationFlowPasarPolis.SerializeToString,
            thirdparty__pb2.OutputPasarPolis.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GettingPolicyStatusPasarPolis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GettingPolicyStatusPasarPolis',
            thirdparty__pb2.ParamGettingPolicyStatusPasarPolis.SerializeToString,
            thirdparty__pb2.OutputPasarPolis.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevinitivScreening(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/RevinitivScreening',
            thirdparty__pb2.InputRevinitivScreening.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevinitivScreeningV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/RevinitivScreeningV2',
            thirdparty__pb2.InputRevinitivScreeningV2.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendClevertapEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/SendClevertapEvent',
            thirdparty__pb2.BatchInputSendClevertapEvent.SerializeToString,
            thirdparty__pb2.OutputSendClevertapEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendClevertapProfileData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/SendClevertapProfileData',
            thirdparty__pb2.BatchInputSendClevertapProfileData.SerializeToString,
            thirdparty__pb2.OutputSendClevertapProfileData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OyGetBankInquiry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/OyGetBankInquiry',
            thirdparty__pb2.InputOyGetBankInquiry.SerializeToString,
            thirdparty__pb2.OutputOyGetBankInquiry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendAppsFlyerEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/SendAppsFlyerEvent',
            thirdparty__pb2.InputSendAppsFlyerEvent.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMonthlyInstallmentOtherVendor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetMonthlyInstallmentOtherVendor',
            thirdparty__pb2.InputGetMonthlyInstallmentOtherVendor.SerializeToString,
            thirdparty__pb2.OutputGetMonthlyInstallmentOtherVendor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncToNetsuite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/SyncToNetsuite',
            thirdparty__pb2.SyncToNetsuiteArguments.SerializeToString,
            common__pb2.PViewResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUCLPefindoData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetUCLPefindoData',
            thirdparty__pb2.InputGetUCLPefindoData.SerializeToString,
            thirdparty__pb2.OutputGetUCLPefindoData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFraudScore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetFraudScore',
            thirdparty__pb2.InputGetFraudscore.SerializeToString,
            thirdparty__pb2.OutputGetFraudscore.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPefindoSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetPefindoSummary',
            thirdparty__pb2.InputGetPefindoSummary.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClikNAE(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/ClikNAE',
            thirdparty__pb2.InputClikNAE.SerializeToString,
            thirdparty__pb2.OutputClikNAE.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetVendorByID',
            thirdparty__pb2.InputGetVendorByID.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetVendorByUUID',
            thirdparty__pb2.GetVendorByUUIDArguments.SerializeToString,
            common__pb2.PViewResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertVendor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/UpsertVendor',
            thirdparty__pb2.UpsertVendorRequest.SerializeToString,
            thirdparty__pb2.OutputThirdParty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorByCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetVendorByCode',
            thirdparty__pb2.GetVendorByCodeArguments.SerializeToString,
            common__pb2.PViewResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetScopesByCodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/GetScopesByCodes',
            thirdparty__pb2.GetScopesByCodesArgs.SerializeToString,
            thirdparty__pb2.GetScopesByCodesReponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyVendorScopes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/ApplyVendorScopes',
            thirdparty__pb2.ApplyVendorScopesArgs.SerializeToString,
            thirdparty__pb2.ApplyVendorScopesResponses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertFreshSalesDeal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/UpsertFreshSalesDeal',
            thirdparty__pb2.FreshSalesDeal.SerializeToString,
            thirdparty__pb2.FreshSalesDeal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertMixpanelEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Thirdparty/InsertMixpanelEvent',
            thirdparty__pb2.InsertMixpanelEventRequest.SerializeToString,
            thirdparty__pb2.InsertMixpanelEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
