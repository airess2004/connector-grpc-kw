# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import assessment_pb2 as assessment__pb2


class AssessmentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AutoApproveUser = channel.unary_unary(
                '/packets.Assessment/AutoApproveUser',
                request_serializer=assessment__pb2.UserAutoApprovalRequest.SerializeToString,
                response_deserializer=assessment__pb2.UserAutoApprovalResponse.FromString,
                )
        self.Create = channel.unary_unary(
                '/packets.Assessment/Create',
                request_serializer=assessment__pb2.CreateAssessmentRequest.SerializeToString,
                response_deserializer=assessment__pb2.CreateAssessmentResponse.FromString,
                )
        self.Assess = channel.unary_unary(
                '/packets.Assessment/Assess',
                request_serializer=assessment__pb2.AssessAssessmentRequest.SerializeToString,
                response_deserializer=assessment__pb2.AssessAssessmentResponse.FromString,
                )
        self.CreateAutoRejectKYC = channel.unary_unary(
                '/packets.Assessment/CreateAutoRejectKYC',
                request_serializer=assessment__pb2.CreateAutoRejectKYCRequest.SerializeToString,
                response_deserializer=assessment__pb2.CreateAutoRejectKYCResponse.FromString,
                )
        self.AutoAssess = channel.unary_unary(
                '/packets.Assessment/AutoAssess',
                request_serializer=assessment__pb2.AssessAssessmentRequest.SerializeToString,
                response_deserializer=assessment__pb2.AssessAssessmentResponse.FromString,
                )
        self.CreateAssessmentRobo = channel.unary_unary(
                '/packets.Assessment/CreateAssessmentRobo',
                request_serializer=assessment__pb2.CreateAssessmentRoboRequest.SerializeToString,
                response_deserializer=assessment__pb2.CreateAssessmentRoboResponse.FromString,
                )
        self.CreateAutoAssessement = channel.unary_unary(
                '/packets.Assessment/CreateAutoAssessement',
                request_serializer=assessment__pb2.CreateAutoAssessementRequest.SerializeToString,
                response_deserializer=assessment__pb2.CreateAutoAssessementResponse.FromString,
                )
        self.GetAvailableOffers = channel.unary_unary(
                '/packets.Assessment/GetAvailableOffers',
                request_serializer=assessment__pb2.GetAvailableOffersRequest.SerializeToString,
                response_deserializer=assessment__pb2.GetAvailableOffersResponse.FromString,
                )
        self.ChooseOffer = channel.unary_unary(
                '/packets.Assessment/ChooseOffer',
                request_serializer=assessment__pb2.ChooseOfferRequest.SerializeToString,
                response_deserializer=assessment__pb2.ChooseOfferResponse.FromString,
                )
        self.RejectOffers = channel.unary_unary(
                '/packets.Assessment/RejectOffers',
                request_serializer=assessment__pb2.RejectOffersRequest.SerializeToString,
                response_deserializer=assessment__pb2.RejectOffersResponse.FromString,
                )
        self.CreateOffer = channel.unary_unary(
                '/packets.Assessment/CreateOffer',
                request_serializer=assessment__pb2.CreateOfferRequest.SerializeToString,
                response_deserializer=assessment__pb2.CreateOfferResponse.FromString,
                )
        self.UserDocumentChecklist = channel.unary_unary(
                '/packets.Assessment/UserDocumentChecklist',
                request_serializer=assessment__pb2.InUserDocumentChecklist.SerializeToString,
                response_deserializer=assessment__pb2.OutUserDocumentChecklist.FromString,
                )
        self.GetAsliRIResponse = channel.unary_unary(
                '/packets.Assessment/GetAsliRIResponse',
                request_serializer=assessment__pb2.InputGetAsliRIResponse.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetAsliRIResponse.FromString,
                )
        self.GetAssessmentLoanContract = channel.unary_unary(
                '/packets.Assessment/GetAssessmentLoanContract',
                request_serializer=assessment__pb2.InputGetAssessmentLoanContract.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetAssessmentLoanContract.FromString,
                )
        self.UpdateSignedLoanContract = channel.unary_unary(
                '/packets.Assessment/UpdateSignedLoanContract',
                request_serializer=assessment__pb2.InputUpdateSignedLoanContract.SerializeToString,
                response_deserializer=assessment__pb2.OutputUpdateSignedLoanContract.FromString,
                )
        self.SaveAsliRIResponse = channel.unary_unary(
                '/packets.Assessment/SaveAsliRIResponse',
                request_serializer=assessment__pb2.InputSaveAsliRIResponse.SerializeToString,
                response_deserializer=assessment__pb2.OutputSaveAsliRIResponse.FromString,
                )
        self.UpdateAssessmentResult = channel.unary_unary(
                '/packets.Assessment/UpdateAssessmentResult',
                request_serializer=assessment__pb2.InUpdateAssessmentResult.SerializeToString,
                response_deserializer=assessment__pb2.OutUpdateAssessmentResult.FromString,
                )
        self.BatchUpdateAssessmentResult = channel.unary_unary(
                '/packets.Assessment/BatchUpdateAssessmentResult',
                request_serializer=assessment__pb2.InBatchUpdateAssessmentResult.SerializeToString,
                response_deserializer=assessment__pb2.OutBatchUpdateAssessmentResult.FromString,
                )
        self.GetOffer = channel.unary_unary(
                '/packets.Assessment/GetOffer',
                request_serializer=assessment__pb2.GetOfferRequest.SerializeToString,
                response_deserializer=assessment__pb2.Offer.FromString,
                )
        self.GetLastAssessment = channel.unary_unary(
                '/packets.Assessment/GetLastAssessment',
                request_serializer=assessment__pb2.InputGetLastAssessment.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.GetAssessmentID = channel.unary_unary(
                '/packets.Assessment/GetAssessmentID',
                request_serializer=assessment__pb2.InputGetAssessmentID.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetAssessmentID.FromString,
                )
        self.GetMasterSetting = channel.unary_unary(
                '/packets.Assessment/GetMasterSetting',
                request_serializer=assessment__pb2.InputGetMasterSetting.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetMasterSetting.FromString,
                )
        self.GetBlacklistAssessment = channel.unary_unary(
                '/packets.Assessment/GetBlacklistAssessment',
                request_serializer=assessment__pb2.Arguments.SerializeToString,
                response_deserializer=assessment__pb2.ViewResponse.FromString,
                )
        self.UpdateBlacklistAssessment = channel.unary_unary(
                '/packets.Assessment/UpdateBlacklistAssessment',
                request_serializer=assessment__pb2.InputUpdateFlag.SerializeToString,
                response_deserializer=assessment__pb2.ViewResponse.FromString,
                )
        self.CreateGuarantor = channel.unary_unary(
                '/packets.Assessment/CreateGuarantor',
                request_serializer=assessment__pb2.InputCreateGuarantor.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.GetAssessmentByID = channel.unary_unary(
                '/packets.Assessment/GetAssessmentByID',
                request_serializer=assessment__pb2.InputGetAssessmentByID.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.GetBankDisbursementByLoanID = channel.unary_unary(
                '/packets.Assessment/GetBankDisbursementByLoanID',
                request_serializer=assessment__pb2.InputGetBankDisbursementByLoanID.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetBankDisbursementByLoanID.FromString,
                )
        self.BatchCreateScoring = channel.unary_unary(
                '/packets.Assessment/BatchCreateScoring',
                request_serializer=assessment__pb2.InputBatchCreateScoring.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.GetDataCorrection = channel.unary_unary(
                '/packets.Assessment/GetDataCorrection',
                request_serializer=assessment__pb2.InputGetDataCorrection.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetDataCorrection.FromString,
                )
        self.SaveAssessmentResponse = channel.unary_unary(
                '/packets.Assessment/SaveAssessmentResponse',
                request_serializer=assessment__pb2.InputSaveAssessmentResponse.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.GetBankDisbursementByUserID = channel.unary_unary(
                '/packets.Assessment/GetBankDisbursementByUserID',
                request_serializer=assessment__pb2.InputGetBankDisbursementByUserID.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.UpdateManualAssessmentResult = channel.unary_unary(
                '/packets.Assessment/UpdateManualAssessmentResult',
                request_serializer=assessment__pb2.InUpdateManualAssessmentResult.SerializeToString,
                response_deserializer=assessment__pb2.OutUpdateAssessmentResult.FromString,
                )
        self.GetAssessmentList = channel.unary_unary(
                '/packets.Assessment/GetAssessmentList',
                request_serializer=assessment__pb2.InputGetAssessmentList.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetAssessmentList.FromString,
                )
        self.CreateParsedBankDocument = channel.unary_unary(
                '/packets.Assessment/CreateParsedBankDocument',
                request_serializer=assessment__pb2.InputCreateParsedBankDocument.SerializeToString,
                response_deserializer=assessment__pb2.OutputCreateParsedBankDocument.FromString,
                )
        self.GetLoanByOfferID = channel.unary_unary(
                '/packets.Assessment/GetLoanByOfferID',
                request_serializer=assessment__pb2.InputGetLoanByOfferID.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetLoanByOfferID.FromString,
                )
        self.ChooseOfferByUserID = channel.unary_unary(
                '/packets.Assessment/ChooseOfferByUserID',
                request_serializer=assessment__pb2.ChooseOfferByUserIDRequest.SerializeToString,
                response_deserializer=assessment__pb2.ChooseOfferResponse.FromString,
                )
        self.RejectOffersByUserID = channel.unary_unary(
                '/packets.Assessment/RejectOffersByUserID',
                request_serializer=assessment__pb2.RejectOffersByUserIDRequest.SerializeToString,
                response_deserializer=assessment__pb2.RejectOffersResponse.FromString,
                )
        self.BatchCreateAssessment = channel.unary_unary(
                '/packets.Assessment/BatchCreateAssessment',
                request_serializer=assessment__pb2.BatchCreateAssessmentRequest.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.GenerateBNPLContractLimit = channel.unary_unary(
                '/packets.Assessment/GenerateBNPLContractLimit',
                request_serializer=assessment__pb2.InputGenerateBNPLContractLimit.SerializeToString,
                response_deserializer=assessment__pb2.OutputGenerateBNPLContractLimit.FromString,
                )
        self.SignBNPLAssessment = channel.unary_unary(
                '/packets.Assessment/SignBNPLAssessment',
                request_serializer=assessment__pb2.InputSignBNPLAssessment.SerializeToString,
                response_deserializer=assessment__pb2.OutputSignBNPLAssessment.FromString,
                )
        self.GetBNPLLimitContract = channel.unary_unary(
                '/packets.Assessment/GetBNPLLimitContract',
                request_serializer=assessment__pb2.InputGetBNPLLimitContract.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetBNPLLimitContract.FromString,
                )
        self.GetAssessmentByLoanCode = channel.unary_unary(
                '/packets.Assessment/GetAssessmentByLoanCode',
                request_serializer=assessment__pb2.InputGetAssessmentByLoanCode.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetAssessmentByLoanCode.FromString,
                )
        self.CreateAssessmentGroup = channel.unary_unary(
                '/packets.Assessment/CreateAssessmentGroup',
                request_serializer=assessment__pb2.InputCreateAssessmentGroup.SerializeToString,
                response_deserializer=assessment__pb2.OutputCreateAssessmentGroup.FromString,
                )
        self.CreateDisbursementBank = channel.unary_unary(
                '/packets.Assessment/CreateDisbursementBank',
                request_serializer=assessment__pb2.InputCreateDisbursementBank.SerializeToString,
                response_deserializer=assessment__pb2.OutputAssessment.FromString,
                )
        self.GetAssessmentByTypeAndAssessedID = channel.unary_unary(
                '/packets.Assessment/GetAssessmentByTypeAndAssessedID',
                request_serializer=assessment__pb2.InputGetAssessmentByTypeAndAssessedID.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetAssessmentByTypeAndAssessedID.FromString,
                )
        self.GetGradeList = channel.unary_unary(
                '/packets.Assessment/GetGradeList',
                request_serializer=assessment__pb2.InputGetGradeList.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetGradeList.FromString,
                )
        self.GenerateContractLimitApproval = channel.unary_unary(
                '/packets.Assessment/GenerateContractLimitApproval',
                request_serializer=assessment__pb2.InputGenerateContractLimitApproval.SerializeToString,
                response_deserializer=assessment__pb2.OutputGenerateContractLimitApproval.FromString,
                )
        self.GenerateCeoCooApproval = channel.unary_unary(
                '/packets.Assessment/GenerateCeoCooApproval',
                request_serializer=assessment__pb2.InputGenerateCeoCooApproval.SerializeToString,
                response_deserializer=assessment__pb2.OutputGenerateCeoCooApproval.FromString,
                )
        self.GetMasterFee = channel.unary_unary(
                '/packets.Assessment/GetMasterFee',
                request_serializer=assessment__pb2.InputGetMasterFee.SerializeToString,
                response_deserializer=assessment__pb2.OutputGetMasterFee.FromString,
                )


class AssessmentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AutoApproveUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Assess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAutoRejectKYC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutoAssess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssessmentRobo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAutoAssessement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableOffers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChooseOffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectOffers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserDocumentChecklist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAsliRIResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssessmentLoanContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSignedLoanContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveAsliRIResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAssessmentResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchUpdateAssessmentResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLastAssessment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssessmentID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMasterSetting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlacklistAssessment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBlacklistAssessment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGuarantor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssessmentByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBankDisbursementByLoanID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchCreateScoring(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataCorrection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveAssessmentResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBankDisbursementByUserID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateManualAssessmentResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssessmentList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateParsedBankDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoanByOfferID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChooseOfferByUserID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectOffersByUserID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchCreateAssessment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateBNPLContractLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignBNPLAssessment(self, request, context):
        """rpc CreateBlacklistAssessment(InputArguments) returns(ViewResponse){}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBNPLLimitContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssessmentByLoanCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAssessmentGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDisbursementBank(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssessmentByTypeAndAssessedID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGradeList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateContractLimitApproval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateCeoCooApproval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMasterFee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssessmentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AutoApproveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AutoApproveUser,
                    request_deserializer=assessment__pb2.UserAutoApprovalRequest.FromString,
                    response_serializer=assessment__pb2.UserAutoApprovalResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=assessment__pb2.CreateAssessmentRequest.FromString,
                    response_serializer=assessment__pb2.CreateAssessmentResponse.SerializeToString,
            ),
            'Assess': grpc.unary_unary_rpc_method_handler(
                    servicer.Assess,
                    request_deserializer=assessment__pb2.AssessAssessmentRequest.FromString,
                    response_serializer=assessment__pb2.AssessAssessmentResponse.SerializeToString,
            ),
            'CreateAutoRejectKYC': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAutoRejectKYC,
                    request_deserializer=assessment__pb2.CreateAutoRejectKYCRequest.FromString,
                    response_serializer=assessment__pb2.CreateAutoRejectKYCResponse.SerializeToString,
            ),
            'AutoAssess': grpc.unary_unary_rpc_method_handler(
                    servicer.AutoAssess,
                    request_deserializer=assessment__pb2.AssessAssessmentRequest.FromString,
                    response_serializer=assessment__pb2.AssessAssessmentResponse.SerializeToString,
            ),
            'CreateAssessmentRobo': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssessmentRobo,
                    request_deserializer=assessment__pb2.CreateAssessmentRoboRequest.FromString,
                    response_serializer=assessment__pb2.CreateAssessmentRoboResponse.SerializeToString,
            ),
            'CreateAutoAssessement': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAutoAssessement,
                    request_deserializer=assessment__pb2.CreateAutoAssessementRequest.FromString,
                    response_serializer=assessment__pb2.CreateAutoAssessementResponse.SerializeToString,
            ),
            'GetAvailableOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableOffers,
                    request_deserializer=assessment__pb2.GetAvailableOffersRequest.FromString,
                    response_serializer=assessment__pb2.GetAvailableOffersResponse.SerializeToString,
            ),
            'ChooseOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.ChooseOffer,
                    request_deserializer=assessment__pb2.ChooseOfferRequest.FromString,
                    response_serializer=assessment__pb2.ChooseOfferResponse.SerializeToString,
            ),
            'RejectOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectOffers,
                    request_deserializer=assessment__pb2.RejectOffersRequest.FromString,
                    response_serializer=assessment__pb2.RejectOffersResponse.SerializeToString,
            ),
            'CreateOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOffer,
                    request_deserializer=assessment__pb2.CreateOfferRequest.FromString,
                    response_serializer=assessment__pb2.CreateOfferResponse.SerializeToString,
            ),
            'UserDocumentChecklist': grpc.unary_unary_rpc_method_handler(
                    servicer.UserDocumentChecklist,
                    request_deserializer=assessment__pb2.InUserDocumentChecklist.FromString,
                    response_serializer=assessment__pb2.OutUserDocumentChecklist.SerializeToString,
            ),
            'GetAsliRIResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAsliRIResponse,
                    request_deserializer=assessment__pb2.InputGetAsliRIResponse.FromString,
                    response_serializer=assessment__pb2.OutputGetAsliRIResponse.SerializeToString,
            ),
            'GetAssessmentLoanContract': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssessmentLoanContract,
                    request_deserializer=assessment__pb2.InputGetAssessmentLoanContract.FromString,
                    response_serializer=assessment__pb2.OutputGetAssessmentLoanContract.SerializeToString,
            ),
            'UpdateSignedLoanContract': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSignedLoanContract,
                    request_deserializer=assessment__pb2.InputUpdateSignedLoanContract.FromString,
                    response_serializer=assessment__pb2.OutputUpdateSignedLoanContract.SerializeToString,
            ),
            'SaveAsliRIResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveAsliRIResponse,
                    request_deserializer=assessment__pb2.InputSaveAsliRIResponse.FromString,
                    response_serializer=assessment__pb2.OutputSaveAsliRIResponse.SerializeToString,
            ),
            'UpdateAssessmentResult': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAssessmentResult,
                    request_deserializer=assessment__pb2.InUpdateAssessmentResult.FromString,
                    response_serializer=assessment__pb2.OutUpdateAssessmentResult.SerializeToString,
            ),
            'BatchUpdateAssessmentResult': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchUpdateAssessmentResult,
                    request_deserializer=assessment__pb2.InBatchUpdateAssessmentResult.FromString,
                    response_serializer=assessment__pb2.OutBatchUpdateAssessmentResult.SerializeToString,
            ),
            'GetOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOffer,
                    request_deserializer=assessment__pb2.GetOfferRequest.FromString,
                    response_serializer=assessment__pb2.Offer.SerializeToString,
            ),
            'GetLastAssessment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLastAssessment,
                    request_deserializer=assessment__pb2.InputGetLastAssessment.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'GetAssessmentID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssessmentID,
                    request_deserializer=assessment__pb2.InputGetAssessmentID.FromString,
                    response_serializer=assessment__pb2.OutputGetAssessmentID.SerializeToString,
            ),
            'GetMasterSetting': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMasterSetting,
                    request_deserializer=assessment__pb2.InputGetMasterSetting.FromString,
                    response_serializer=assessment__pb2.OutputGetMasterSetting.SerializeToString,
            ),
            'GetBlacklistAssessment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlacklistAssessment,
                    request_deserializer=assessment__pb2.Arguments.FromString,
                    response_serializer=assessment__pb2.ViewResponse.SerializeToString,
            ),
            'UpdateBlacklistAssessment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBlacklistAssessment,
                    request_deserializer=assessment__pb2.InputUpdateFlag.FromString,
                    response_serializer=assessment__pb2.ViewResponse.SerializeToString,
            ),
            'CreateGuarantor': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGuarantor,
                    request_deserializer=assessment__pb2.InputCreateGuarantor.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'GetAssessmentByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssessmentByID,
                    request_deserializer=assessment__pb2.InputGetAssessmentByID.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'GetBankDisbursementByLoanID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBankDisbursementByLoanID,
                    request_deserializer=assessment__pb2.InputGetBankDisbursementByLoanID.FromString,
                    response_serializer=assessment__pb2.OutputGetBankDisbursementByLoanID.SerializeToString,
            ),
            'BatchCreateScoring': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchCreateScoring,
                    request_deserializer=assessment__pb2.InputBatchCreateScoring.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'GetDataCorrection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataCorrection,
                    request_deserializer=assessment__pb2.InputGetDataCorrection.FromString,
                    response_serializer=assessment__pb2.OutputGetDataCorrection.SerializeToString,
            ),
            'SaveAssessmentResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveAssessmentResponse,
                    request_deserializer=assessment__pb2.InputSaveAssessmentResponse.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'GetBankDisbursementByUserID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBankDisbursementByUserID,
                    request_deserializer=assessment__pb2.InputGetBankDisbursementByUserID.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'UpdateManualAssessmentResult': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateManualAssessmentResult,
                    request_deserializer=assessment__pb2.InUpdateManualAssessmentResult.FromString,
                    response_serializer=assessment__pb2.OutUpdateAssessmentResult.SerializeToString,
            ),
            'GetAssessmentList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssessmentList,
                    request_deserializer=assessment__pb2.InputGetAssessmentList.FromString,
                    response_serializer=assessment__pb2.OutputGetAssessmentList.SerializeToString,
            ),
            'CreateParsedBankDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateParsedBankDocument,
                    request_deserializer=assessment__pb2.InputCreateParsedBankDocument.FromString,
                    response_serializer=assessment__pb2.OutputCreateParsedBankDocument.SerializeToString,
            ),
            'GetLoanByOfferID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoanByOfferID,
                    request_deserializer=assessment__pb2.InputGetLoanByOfferID.FromString,
                    response_serializer=assessment__pb2.OutputGetLoanByOfferID.SerializeToString,
            ),
            'ChooseOfferByUserID': grpc.unary_unary_rpc_method_handler(
                    servicer.ChooseOfferByUserID,
                    request_deserializer=assessment__pb2.ChooseOfferByUserIDRequest.FromString,
                    response_serializer=assessment__pb2.ChooseOfferResponse.SerializeToString,
            ),
            'RejectOffersByUserID': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectOffersByUserID,
                    request_deserializer=assessment__pb2.RejectOffersByUserIDRequest.FromString,
                    response_serializer=assessment__pb2.RejectOffersResponse.SerializeToString,
            ),
            'BatchCreateAssessment': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchCreateAssessment,
                    request_deserializer=assessment__pb2.BatchCreateAssessmentRequest.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'GenerateBNPLContractLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateBNPLContractLimit,
                    request_deserializer=assessment__pb2.InputGenerateBNPLContractLimit.FromString,
                    response_serializer=assessment__pb2.OutputGenerateBNPLContractLimit.SerializeToString,
            ),
            'SignBNPLAssessment': grpc.unary_unary_rpc_method_handler(
                    servicer.SignBNPLAssessment,
                    request_deserializer=assessment__pb2.InputSignBNPLAssessment.FromString,
                    response_serializer=assessment__pb2.OutputSignBNPLAssessment.SerializeToString,
            ),
            'GetBNPLLimitContract': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBNPLLimitContract,
                    request_deserializer=assessment__pb2.InputGetBNPLLimitContract.FromString,
                    response_serializer=assessment__pb2.OutputGetBNPLLimitContract.SerializeToString,
            ),
            'GetAssessmentByLoanCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssessmentByLoanCode,
                    request_deserializer=assessment__pb2.InputGetAssessmentByLoanCode.FromString,
                    response_serializer=assessment__pb2.OutputGetAssessmentByLoanCode.SerializeToString,
            ),
            'CreateAssessmentGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAssessmentGroup,
                    request_deserializer=assessment__pb2.InputCreateAssessmentGroup.FromString,
                    response_serializer=assessment__pb2.OutputCreateAssessmentGroup.SerializeToString,
            ),
            'CreateDisbursementBank': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDisbursementBank,
                    request_deserializer=assessment__pb2.InputCreateDisbursementBank.FromString,
                    response_serializer=assessment__pb2.OutputAssessment.SerializeToString,
            ),
            'GetAssessmentByTypeAndAssessedID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssessmentByTypeAndAssessedID,
                    request_deserializer=assessment__pb2.InputGetAssessmentByTypeAndAssessedID.FromString,
                    response_serializer=assessment__pb2.OutputGetAssessmentByTypeAndAssessedID.SerializeToString,
            ),
            'GetGradeList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGradeList,
                    request_deserializer=assessment__pb2.InputGetGradeList.FromString,
                    response_serializer=assessment__pb2.OutputGetGradeList.SerializeToString,
            ),
            'GenerateContractLimitApproval': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateContractLimitApproval,
                    request_deserializer=assessment__pb2.InputGenerateContractLimitApproval.FromString,
                    response_serializer=assessment__pb2.OutputGenerateContractLimitApproval.SerializeToString,
            ),
            'GenerateCeoCooApproval': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateCeoCooApproval,
                    request_deserializer=assessment__pb2.InputGenerateCeoCooApproval.FromString,
                    response_serializer=assessment__pb2.OutputGenerateCeoCooApproval.SerializeToString,
            ),
            'GetMasterFee': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMasterFee,
                    request_deserializer=assessment__pb2.InputGetMasterFee.FromString,
                    response_serializer=assessment__pb2.OutputGetMasterFee.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'packets.Assessment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Assessment(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AutoApproveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/AutoApproveUser',
            assessment__pb2.UserAutoApprovalRequest.SerializeToString,
            assessment__pb2.UserAutoApprovalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/Create',
            assessment__pb2.CreateAssessmentRequest.SerializeToString,
            assessment__pb2.CreateAssessmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Assess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/Assess',
            assessment__pb2.AssessAssessmentRequest.SerializeToString,
            assessment__pb2.AssessAssessmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAutoRejectKYC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateAutoRejectKYC',
            assessment__pb2.CreateAutoRejectKYCRequest.SerializeToString,
            assessment__pb2.CreateAutoRejectKYCResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AutoAssess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/AutoAssess',
            assessment__pb2.AssessAssessmentRequest.SerializeToString,
            assessment__pb2.AssessAssessmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAssessmentRobo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateAssessmentRobo',
            assessment__pb2.CreateAssessmentRoboRequest.SerializeToString,
            assessment__pb2.CreateAssessmentRoboResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAutoAssessement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateAutoAssessement',
            assessment__pb2.CreateAutoAssessementRequest.SerializeToString,
            assessment__pb2.CreateAutoAssessementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAvailableOffers',
            assessment__pb2.GetAvailableOffersRequest.SerializeToString,
            assessment__pb2.GetAvailableOffersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChooseOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/ChooseOffer',
            assessment__pb2.ChooseOfferRequest.SerializeToString,
            assessment__pb2.ChooseOfferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RejectOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/RejectOffers',
            assessment__pb2.RejectOffersRequest.SerializeToString,
            assessment__pb2.RejectOffersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateOffer',
            assessment__pb2.CreateOfferRequest.SerializeToString,
            assessment__pb2.CreateOfferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserDocumentChecklist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/UserDocumentChecklist',
            assessment__pb2.InUserDocumentChecklist.SerializeToString,
            assessment__pb2.OutUserDocumentChecklist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAsliRIResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAsliRIResponse',
            assessment__pb2.InputGetAsliRIResponse.SerializeToString,
            assessment__pb2.OutputGetAsliRIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssessmentLoanContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAssessmentLoanContract',
            assessment__pb2.InputGetAssessmentLoanContract.SerializeToString,
            assessment__pb2.OutputGetAssessmentLoanContract.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSignedLoanContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/UpdateSignedLoanContract',
            assessment__pb2.InputUpdateSignedLoanContract.SerializeToString,
            assessment__pb2.OutputUpdateSignedLoanContract.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveAsliRIResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/SaveAsliRIResponse',
            assessment__pb2.InputSaveAsliRIResponse.SerializeToString,
            assessment__pb2.OutputSaveAsliRIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAssessmentResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/UpdateAssessmentResult',
            assessment__pb2.InUpdateAssessmentResult.SerializeToString,
            assessment__pb2.OutUpdateAssessmentResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchUpdateAssessmentResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/BatchUpdateAssessmentResult',
            assessment__pb2.InBatchUpdateAssessmentResult.SerializeToString,
            assessment__pb2.OutBatchUpdateAssessmentResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetOffer',
            assessment__pb2.GetOfferRequest.SerializeToString,
            assessment__pb2.Offer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLastAssessment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetLastAssessment',
            assessment__pb2.InputGetLastAssessment.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssessmentID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAssessmentID',
            assessment__pb2.InputGetAssessmentID.SerializeToString,
            assessment__pb2.OutputGetAssessmentID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMasterSetting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetMasterSetting',
            assessment__pb2.InputGetMasterSetting.SerializeToString,
            assessment__pb2.OutputGetMasterSetting.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlacklistAssessment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetBlacklistAssessment',
            assessment__pb2.Arguments.SerializeToString,
            assessment__pb2.ViewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBlacklistAssessment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/UpdateBlacklistAssessment',
            assessment__pb2.InputUpdateFlag.SerializeToString,
            assessment__pb2.ViewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGuarantor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateGuarantor',
            assessment__pb2.InputCreateGuarantor.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssessmentByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAssessmentByID',
            assessment__pb2.InputGetAssessmentByID.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBankDisbursementByLoanID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetBankDisbursementByLoanID',
            assessment__pb2.InputGetBankDisbursementByLoanID.SerializeToString,
            assessment__pb2.OutputGetBankDisbursementByLoanID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchCreateScoring(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/BatchCreateScoring',
            assessment__pb2.InputBatchCreateScoring.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataCorrection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetDataCorrection',
            assessment__pb2.InputGetDataCorrection.SerializeToString,
            assessment__pb2.OutputGetDataCorrection.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveAssessmentResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/SaveAssessmentResponse',
            assessment__pb2.InputSaveAssessmentResponse.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBankDisbursementByUserID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetBankDisbursementByUserID',
            assessment__pb2.InputGetBankDisbursementByUserID.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateManualAssessmentResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/UpdateManualAssessmentResult',
            assessment__pb2.InUpdateManualAssessmentResult.SerializeToString,
            assessment__pb2.OutUpdateAssessmentResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssessmentList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAssessmentList',
            assessment__pb2.InputGetAssessmentList.SerializeToString,
            assessment__pb2.OutputGetAssessmentList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateParsedBankDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateParsedBankDocument',
            assessment__pb2.InputCreateParsedBankDocument.SerializeToString,
            assessment__pb2.OutputCreateParsedBankDocument.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoanByOfferID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetLoanByOfferID',
            assessment__pb2.InputGetLoanByOfferID.SerializeToString,
            assessment__pb2.OutputGetLoanByOfferID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChooseOfferByUserID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/ChooseOfferByUserID',
            assessment__pb2.ChooseOfferByUserIDRequest.SerializeToString,
            assessment__pb2.ChooseOfferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RejectOffersByUserID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/RejectOffersByUserID',
            assessment__pb2.RejectOffersByUserIDRequest.SerializeToString,
            assessment__pb2.RejectOffersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchCreateAssessment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/BatchCreateAssessment',
            assessment__pb2.BatchCreateAssessmentRequest.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateBNPLContractLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GenerateBNPLContractLimit',
            assessment__pb2.InputGenerateBNPLContractLimit.SerializeToString,
            assessment__pb2.OutputGenerateBNPLContractLimit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignBNPLAssessment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/SignBNPLAssessment',
            assessment__pb2.InputSignBNPLAssessment.SerializeToString,
            assessment__pb2.OutputSignBNPLAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBNPLLimitContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetBNPLLimitContract',
            assessment__pb2.InputGetBNPLLimitContract.SerializeToString,
            assessment__pb2.OutputGetBNPLLimitContract.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssessmentByLoanCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAssessmentByLoanCode',
            assessment__pb2.InputGetAssessmentByLoanCode.SerializeToString,
            assessment__pb2.OutputGetAssessmentByLoanCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAssessmentGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateAssessmentGroup',
            assessment__pb2.InputCreateAssessmentGroup.SerializeToString,
            assessment__pb2.OutputCreateAssessmentGroup.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDisbursementBank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/CreateDisbursementBank',
            assessment__pb2.InputCreateDisbursementBank.SerializeToString,
            assessment__pb2.OutputAssessment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssessmentByTypeAndAssessedID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetAssessmentByTypeAndAssessedID',
            assessment__pb2.InputGetAssessmentByTypeAndAssessedID.SerializeToString,
            assessment__pb2.OutputGetAssessmentByTypeAndAssessedID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGradeList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetGradeList',
            assessment__pb2.InputGetGradeList.SerializeToString,
            assessment__pb2.OutputGetGradeList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateContractLimitApproval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GenerateContractLimitApproval',
            assessment__pb2.InputGenerateContractLimitApproval.SerializeToString,
            assessment__pb2.OutputGenerateContractLimitApproval.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateCeoCooApproval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GenerateCeoCooApproval',
            assessment__pb2.InputGenerateCeoCooApproval.SerializeToString,
            assessment__pb2.OutputGenerateCeoCooApproval.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMasterFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.Assessment/GetMasterFee',
            assessment__pb2.InputGetMasterFee.SerializeToString,
            assessment__pb2.OutputGetMasterFee.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
