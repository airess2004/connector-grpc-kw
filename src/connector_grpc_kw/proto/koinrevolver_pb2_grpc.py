# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import koinrevolver_pb2 as koinrevolver__pb2


class KoinRevolverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetailLoan = channel.unary_unary(
                '/packets.KoinRevolver/DetailLoan',
                request_serializer=koinrevolver__pb2.InputKoinRevolverDetailLoan.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolverDetailLoan.FromString,
                )
        self.UpsertVendorDetail = channel.unary_unary(
                '/packets.KoinRevolver/UpsertVendorDetail',
                request_serializer=koinrevolver__pb2.InputKoinRevolverUpsertVendorDetail.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolverUpsertVendorDetail.FromString,
                )
        self.DetailLoanByID = channel.unary_unary(
                '/packets.KoinRevolver/DetailLoanByID',
                request_serializer=koinrevolver__pb2.InputInvoiceLoanDetail.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputInputInvoiceLoanDetail.FromString,
                )
        self.GetVendorBankInformationByCode = channel.unary_unary(
                '/packets.KoinRevolver/GetVendorBankInformationByCode',
                request_serializer=koinrevolver__pb2.InputGetVendorBankByCode.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGetVendorBankByCode.FromString,
                )
        self.GetLoanInformation = channel.unary_unary(
                '/packets.KoinRevolver/GetLoanInformation',
                request_serializer=koinrevolver__pb2.InputKoinRevolverDetailLoan.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.GetLoanApplication = channel.unary_unary(
                '/packets.KoinRevolver/GetLoanApplication',
                request_serializer=koinrevolver__pb2.InputKoinRevolverGetLoanApplication.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGetVendorBankByCode.FromString,
                )
        self.GenerateVa = channel.unary_unary(
                '/packets.KoinRevolver/GenerateVa',
                request_serializer=koinrevolver__pb2.InputGenerateVa.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGenerateVa.FromString,
                )
        self.BatchCreateLoanDetail = channel.unary_unary(
                '/packets.KoinRevolver/BatchCreateLoanDetail',
                request_serializer=koinrevolver__pb2.InputBatchCreateInvoiceLoanDetail.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.GetVendorCommissionFees = channel.unary_unary(
                '/packets.KoinRevolver/GetVendorCommissionFees',
                request_serializer=koinrevolver__pb2.InputGetVendorCommissionFees.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.GetVendorByCode = channel.unary_unary(
                '/packets.KoinRevolver/GetVendorByCode',
                request_serializer=koinrevolver__pb2.InputGetVendorByCode.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGetVendor.FromString,
                )
        self.GetVendorDetailsByLeadUserId = channel.unary_unary(
                '/packets.KoinRevolver/GetVendorDetailsByLeadUserId',
                request_serializer=koinrevolver__pb2.InputGetVendorDetailByUserId.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGetVendorDetailByUserId.FromString,
                )
        self.GetLoanApplicationByLoanID = channel.unary_unary(
                '/packets.KoinRevolver/GetLoanApplicationByLoanID',
                request_serializer=koinrevolver__pb2.InputGetLoanApplicationByLoanID.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.UpdateLoanApplicationByLoanID = channel.unary_unary(
                '/packets.KoinRevolver/UpdateLoanApplicationByLoanID',
                request_serializer=koinrevolver__pb2.InputUpdateLoanApplicationByLoanID.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.GetLeads = channel.unary_unary(
                '/packets.KoinRevolver/GetLeads',
                request_serializer=koinrevolver__pb2.InputGetLeads.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.UpdateLimitApplication = channel.unary_unary(
                '/packets.KoinRevolver/UpdateLimitApplication',
                request_serializer=koinrevolver__pb2.InputUpdateLimitApplication.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputUpdateLimitApplication.FromString,
                )
        self.GetVendorByUUID = channel.unary_unary(
                '/packets.KoinRevolver/GetVendorByUUID',
                request_serializer=koinrevolver__pb2.InputGetVendorByUUID.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGetVendor.FromString,
                )
        self.GetPrincipalByCode = channel.unary_unary(
                '/packets.KoinRevolver/GetPrincipalByCode',
                request_serializer=koinrevolver__pb2.InputGetPrincipalByCode.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.GetReferralByCode = channel.unary_unary(
                '/packets.KoinRevolver/GetReferralByCode',
                request_serializer=koinrevolver__pb2.InputGetReferralByCode.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputKoinRevolver.FromString,
                )
        self.RequestLimitMBA = channel.unary_unary(
                '/packets.KoinRevolver/RequestLimitMBA',
                request_serializer=koinrevolver__pb2.InputRequestLimitMBA.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputRequestLimitMBA.FromString,
                )
        self.CreateLoan = channel.unary_unary(
                '/packets.KoinRevolver/CreateLoan',
                request_serializer=koinrevolver__pb2.InputRequestCreateLoan.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputRequestCreateLoan.FromString,
                )
        self.CreateLimitApproval = channel.unary_unary(
                '/packets.KoinRevolver/CreateLimitApproval',
                request_serializer=koinrevolver__pb2.InputRequestLimitApproval.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputRequestLimitApproval.FromString,
                )
        self.GetVendorByPrincipalName = channel.unary_unary(
                '/packets.KoinRevolver/GetVendorByPrincipalName',
                request_serializer=koinrevolver__pb2.InputGetVendorByName.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGetVendor.FromString,
                )
        self.GetVendorByReferralName = channel.unary_unary(
                '/packets.KoinRevolver/GetVendorByReferralName',
                request_serializer=koinrevolver__pb2.InputGetVendorByName.SerializeToString,
                response_deserializer=koinrevolver__pb2.OutputGetVendor.FromString,
                )


class KoinRevolverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetailLoan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertVendorDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetailLoanByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorBankInformationByCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoanInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoanApplication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateVa(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchCreateLoanDetail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorCommissionFees(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorByCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorDetailsByLeadUserId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoanApplicationByLoanID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLoanApplicationByLoanID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLimitApplication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorByUUID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrincipalByCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReferralByCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLimitMBA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLoan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLimitApproval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorByPrincipalName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVendorByReferralName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KoinRevolverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetailLoan': grpc.unary_unary_rpc_method_handler(
                    servicer.DetailLoan,
                    request_deserializer=koinrevolver__pb2.InputKoinRevolverDetailLoan.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolverDetailLoan.SerializeToString,
            ),
            'UpsertVendorDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertVendorDetail,
                    request_deserializer=koinrevolver__pb2.InputKoinRevolverUpsertVendorDetail.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolverUpsertVendorDetail.SerializeToString,
            ),
            'DetailLoanByID': grpc.unary_unary_rpc_method_handler(
                    servicer.DetailLoanByID,
                    request_deserializer=koinrevolver__pb2.InputInvoiceLoanDetail.FromString,
                    response_serializer=koinrevolver__pb2.OutputInputInvoiceLoanDetail.SerializeToString,
            ),
            'GetVendorBankInformationByCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorBankInformationByCode,
                    request_deserializer=koinrevolver__pb2.InputGetVendorBankByCode.FromString,
                    response_serializer=koinrevolver__pb2.OutputGetVendorBankByCode.SerializeToString,
            ),
            'GetLoanInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoanInformation,
                    request_deserializer=koinrevolver__pb2.InputKoinRevolverDetailLoan.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'GetLoanApplication': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoanApplication,
                    request_deserializer=koinrevolver__pb2.InputKoinRevolverGetLoanApplication.FromString,
                    response_serializer=koinrevolver__pb2.OutputGetVendorBankByCode.SerializeToString,
            ),
            'GenerateVa': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateVa,
                    request_deserializer=koinrevolver__pb2.InputGenerateVa.FromString,
                    response_serializer=koinrevolver__pb2.OutputGenerateVa.SerializeToString,
            ),
            'BatchCreateLoanDetail': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchCreateLoanDetail,
                    request_deserializer=koinrevolver__pb2.InputBatchCreateInvoiceLoanDetail.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'GetVendorCommissionFees': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorCommissionFees,
                    request_deserializer=koinrevolver__pb2.InputGetVendorCommissionFees.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'GetVendorByCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorByCode,
                    request_deserializer=koinrevolver__pb2.InputGetVendorByCode.FromString,
                    response_serializer=koinrevolver__pb2.OutputGetVendor.SerializeToString,
            ),
            'GetVendorDetailsByLeadUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorDetailsByLeadUserId,
                    request_deserializer=koinrevolver__pb2.InputGetVendorDetailByUserId.FromString,
                    response_serializer=koinrevolver__pb2.OutputGetVendorDetailByUserId.SerializeToString,
            ),
            'GetLoanApplicationByLoanID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoanApplicationByLoanID,
                    request_deserializer=koinrevolver__pb2.InputGetLoanApplicationByLoanID.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'UpdateLoanApplicationByLoanID': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLoanApplicationByLoanID,
                    request_deserializer=koinrevolver__pb2.InputUpdateLoanApplicationByLoanID.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'GetLeads': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeads,
                    request_deserializer=koinrevolver__pb2.InputGetLeads.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'UpdateLimitApplication': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLimitApplication,
                    request_deserializer=koinrevolver__pb2.InputUpdateLimitApplication.FromString,
                    response_serializer=koinrevolver__pb2.OutputUpdateLimitApplication.SerializeToString,
            ),
            'GetVendorByUUID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorByUUID,
                    request_deserializer=koinrevolver__pb2.InputGetVendorByUUID.FromString,
                    response_serializer=koinrevolver__pb2.OutputGetVendor.SerializeToString,
            ),
            'GetPrincipalByCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrincipalByCode,
                    request_deserializer=koinrevolver__pb2.InputGetPrincipalByCode.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'GetReferralByCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReferralByCode,
                    request_deserializer=koinrevolver__pb2.InputGetReferralByCode.FromString,
                    response_serializer=koinrevolver__pb2.OutputKoinRevolver.SerializeToString,
            ),
            'RequestLimitMBA': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLimitMBA,
                    request_deserializer=koinrevolver__pb2.InputRequestLimitMBA.FromString,
                    response_serializer=koinrevolver__pb2.OutputRequestLimitMBA.SerializeToString,
            ),
            'CreateLoan': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLoan,
                    request_deserializer=koinrevolver__pb2.InputRequestCreateLoan.FromString,
                    response_serializer=koinrevolver__pb2.OutputRequestCreateLoan.SerializeToString,
            ),
            'CreateLimitApproval': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLimitApproval,
                    request_deserializer=koinrevolver__pb2.InputRequestLimitApproval.FromString,
                    response_serializer=koinrevolver__pb2.OutputRequestLimitApproval.SerializeToString,
            ),
            'GetVendorByPrincipalName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorByPrincipalName,
                    request_deserializer=koinrevolver__pb2.InputGetVendorByName.FromString,
                    response_serializer=koinrevolver__pb2.OutputGetVendor.SerializeToString,
            ),
            'GetVendorByReferralName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVendorByReferralName,
                    request_deserializer=koinrevolver__pb2.InputGetVendorByName.FromString,
                    response_serializer=koinrevolver__pb2.OutputGetVendor.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'packets.KoinRevolver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KoinRevolver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetailLoan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/DetailLoan',
            koinrevolver__pb2.InputKoinRevolverDetailLoan.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolverDetailLoan.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertVendorDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/UpsertVendorDetail',
            koinrevolver__pb2.InputKoinRevolverUpsertVendorDetail.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolverUpsertVendorDetail.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetailLoanByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/DetailLoanByID',
            koinrevolver__pb2.InputInvoiceLoanDetail.SerializeToString,
            koinrevolver__pb2.OutputInputInvoiceLoanDetail.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorBankInformationByCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetVendorBankInformationByCode',
            koinrevolver__pb2.InputGetVendorBankByCode.SerializeToString,
            koinrevolver__pb2.OutputGetVendorBankByCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoanInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetLoanInformation',
            koinrevolver__pb2.InputKoinRevolverDetailLoan.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoanApplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetLoanApplication',
            koinrevolver__pb2.InputKoinRevolverGetLoanApplication.SerializeToString,
            koinrevolver__pb2.OutputGetVendorBankByCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateVa(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GenerateVa',
            koinrevolver__pb2.InputGenerateVa.SerializeToString,
            koinrevolver__pb2.OutputGenerateVa.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchCreateLoanDetail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/BatchCreateLoanDetail',
            koinrevolver__pb2.InputBatchCreateInvoiceLoanDetail.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorCommissionFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetVendorCommissionFees',
            koinrevolver__pb2.InputGetVendorCommissionFees.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorByCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetVendorByCode',
            koinrevolver__pb2.InputGetVendorByCode.SerializeToString,
            koinrevolver__pb2.OutputGetVendor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorDetailsByLeadUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetVendorDetailsByLeadUserId',
            koinrevolver__pb2.InputGetVendorDetailByUserId.SerializeToString,
            koinrevolver__pb2.OutputGetVendorDetailByUserId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoanApplicationByLoanID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetLoanApplicationByLoanID',
            koinrevolver__pb2.InputGetLoanApplicationByLoanID.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateLoanApplicationByLoanID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/UpdateLoanApplicationByLoanID',
            koinrevolver__pb2.InputUpdateLoanApplicationByLoanID.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLeads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetLeads',
            koinrevolver__pb2.InputGetLeads.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateLimitApplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/UpdateLimitApplication',
            koinrevolver__pb2.InputUpdateLimitApplication.SerializeToString,
            koinrevolver__pb2.OutputUpdateLimitApplication.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorByUUID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetVendorByUUID',
            koinrevolver__pb2.InputGetVendorByUUID.SerializeToString,
            koinrevolver__pb2.OutputGetVendor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrincipalByCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetPrincipalByCode',
            koinrevolver__pb2.InputGetPrincipalByCode.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReferralByCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetReferralByCode',
            koinrevolver__pb2.InputGetReferralByCode.SerializeToString,
            koinrevolver__pb2.OutputKoinRevolver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestLimitMBA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/RequestLimitMBA',
            koinrevolver__pb2.InputRequestLimitMBA.SerializeToString,
            koinrevolver__pb2.OutputRequestLimitMBA.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLoan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/CreateLoan',
            koinrevolver__pb2.InputRequestCreateLoan.SerializeToString,
            koinrevolver__pb2.OutputRequestCreateLoan.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateLimitApproval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/CreateLimitApproval',
            koinrevolver__pb2.InputRequestLimitApproval.SerializeToString,
            koinrevolver__pb2.OutputRequestLimitApproval.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorByPrincipalName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetVendorByPrincipalName',
            koinrevolver__pb2.InputGetVendorByName.SerializeToString,
            koinrevolver__pb2.OutputGetVendor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVendorByReferralName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/packets.KoinRevolver/GetVendorByReferralName',
            koinrevolver__pb2.InputGetVendorByName.SerializeToString,
            koinrevolver__pb2.OutputGetVendor.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
